ARG APP_NAME=mconf_aggr
ARG APP_PATH=/usr/src/$APP_NAME
ARG PYTHON_VERSION
ARG POETRY_VERSION
ARG MCONF_AGGR_ENV

#
# Stage: staging
#
FROM python:${PYTHON_VERSION} as staging
ARG APP_PATH
ARG POETRY_VERSION
ARG POETRY_HOME

ENV POETRY_VERSION=$POETRY_VERSION \
    POETRY_HOME=$POETRY_HOME \
    POETRY_VIRTUALENVS_CREATE=false

# Install Poetry using POETRY_VERSION and POETRY_HOME
RUN curl -sSL https://install.python-poetry.org | python3 -
ENV PATH="$POETRY_HOME/bin:$PATH"

WORKDIR $APP_PATH
COPY ./poetry.lock ./pyproject.toml ./
RUN poetry install --no-root

COPY ./$APP_NAME ./$APP_NAME

#
# Stage: build
#
FROM staging as build
ARG APP_PATH

WORKDIR $APP_PATH
RUN poetry build -f wheel
RUN poetry export -o constraints.txt --without-hashes


#
# Stage: production
#
FROM python:${PYTHON_VERSION}-slim-bullseye as production
ARG APP_NAME
ARG APP_PATH

ENV PYTHONDONTWRITEBYTECODE=1 \
    POETRY_VIRTUALENVS_IN_PROJECT=false

WORKDIR $APP_PATH

COPY --from=build $APP_PATH/dist/*.whl ./
COPY --from=build $APP_PATH/constraints.txt ./

RUN pip install ./$APP_NAME*.whl --constraint constraints.txt \
    && rm *.whl constraints.txt

ENV PORT=8000
EXPOSE $PORT

CMD gunicorn mconf_aggr.main:app --bind=0.0.0.0:${PORT} --worker-class gevent
